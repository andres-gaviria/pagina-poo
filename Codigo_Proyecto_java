///////////////Menu////////////////

package Ordenamiento;

import java.util.Random;

import java.util.Scanner;

public class Menu {
	int opcion,opcion2,i,n;
	long tiempo,inicio, fin, segundos;
	private Scanner teclado;{
			
		teclado = new Scanner(System.in);
		//int opcion,opcion2,i,n;
		System.out.println("\nMETODOS DE ORDENAMIENTO");
		System.out.println("1. Metodo de Insercion");
		System.out.println("2. Metodo de Mezclas");
		System.out.println("3. Metodo de Montones (heap sort)");
		System.out.println("4. Metodo Rapido (QuickSort)");
		System.out.println("5. Metodo de Conteo (CountingSort)");
		System.out.println("Opcion:");	
		opcion = teclado.nextInt();
		
		switch(opcion) {
		case 1:	
			System.out.println("METODO DE INSERCION");
			System.out.println("1. 100");
			System.out.println("2. 200");
			System.out.println("3. 500");
			System.out.println("4. 1000");
			System.out.println("5. 1500");
			opcion2 = teclado.nextInt();
			
			switch(opcion2) {
			case 1:
					n=100;
				break;
			case 2:
					n=20;
				break;
			case 3:
					n=500;
				break;
			case 4:
					n=1000;
				break;
			case 5:
					n=1500;
			break;
			default:
				System.out.println("Opcion incorrecta");
			}
			int[] arreglo = new int[n];
	        Random rnd = new Random();
	        System.out.println("Numeros aleatoreos");
	        for (i = 0; i < arreglo.length; i++) {
	            arreglo[i] = rnd.nextInt(9999)+1;
	            System.out.print(arreglo[i] + " ");
	        }   	
	        System.out.println("\n");	
				Insercion o= new Insercion();
				o.Ordenar(arreglo);
			System.out.println("Numeros ordenados");
			 inicio = System.currentTimeMillis();
			for(i=0; i<arreglo.length;i++) {
				System.out.println(arreglo[i] + " ");
			}
			fin = System.currentTimeMillis();
			tiempo = fin - inicio;
			System.out.println("\nEl ordenamiento se demoro "+ tiempo + " milisegundos");
			new Menu();
			break;
		case 2:			
			System.out.println("METODO POR MEZCLA");
			System.out.println("1. 100");
			System.out.println("2. 200");
			System.out.println("3. 500");
			System.out.println("4. 1000");
			System.out.println("5. 1500");
			opcion2 = teclado.nextInt();
			
			switch(opcion2) {
			case 1:
					n=100;
				break;
			case 2:
					n=20;
				break;
			case 3:
					n=500;
				break;
			case 4:
					n=1000;
				break;
			case 5:
					n=1500;
			break;
			default:
				System.out.println("Opcion incorrecta");
			}
			int[] array = new int[n];
	        Random rnd2 = new Random();
	        System.out.println("Numeros aleatoreos");
	        for (i = 0; i < array.length; i++) {
	            array[i] = rnd2.nextInt(9999)+1;
	            System.out.print(array[i] + " ");
	        }   	
	        System.out.println("\n");		
				Burbuja o1 = new Burbuja();
				o1.OrdenamientoBurbuja(array);
			System.out.println("Numeros ordenados");
			 inicio = System.currentTimeMillis();
				for(i = 0; i < array.length; i++) {
					System.out.println(array[i] + " ");
				}
				fin = System.currentTimeMillis();
				tiempo = fin - inicio;
				System.out.println("\nEl ordenamiento se demoro "+ tiempo + " milisegundos");
				new Menu();
			break;
		case 3:
		
			System.out.println("METODO POR MONTONES(HEAP SORT)");
			System.out.println("1. 100");
			System.out.println("2. 200");
			System.out.println("3. 500");
			System.out.println("4. 1000");
			System.out.println("5. 1500");
			opcion2 = teclado.nextInt();
			
			switch(opcion2) {
			case 1:
					n=100;
				break;
			case 2:
					n=20;
				break;
			case 3:
					n=500;
				break;
			case 4:
					n=1000;
				break;
			case 5:
					n=1500;
			break;
			default:
				System.out.println("Opcion incorrecta");
			} 
			int[] arr = new int[n];
	        Random rnd3 = new Random();
	        System.out.println("Numeros aleatoreos");
	        for (i = 0; i < arr.length; i++) {
	            arr[i] = rnd3.nextInt(9999)+1;
	            System.out.print(arr[i] + " ");
	        }   	
	        System.out.println("\n");
			HeapSort o2 = new HeapSort();
			o2.OrdenamientoHeapSort(arr);
			 System.out.println("Numeros ordenados");
			 inicio = System.currentTimeMillis();
			for (i = 0; i < arr.length; i++){ 
				System.out.print(arr[i]+ " "); 
			} 
			fin = System.currentTimeMillis();
			tiempo = fin - inicio;
			System.out.println("\nEl ordenamiento se demoro "+ tiempo + " milisegundos");
			System.out.println("\n");
			new Menu();
		break;
		case 4: 
			System.out.println("METODO RAPIDO (QUICKSORT)");
			System.out.println("1. 100");
			System.out.println("2. 200");
			System.out.println("3. 500");
			System.out.println("4. 1000");
			System.out.println("5. 1500");
			opcion2 = teclado.nextInt();
			
			switch(opcion2) {
			case 1:
					n=100;
				break;
			case 2:
					n=20;
				break;
			case 3:
					n=500;
				break;
			case 4:
					n=1000;
				break;
			case 5:
					n=1500;
			break;
			default:
				System.out.println("Opcion incorrecta");
			} 
			int[] vector = new int[n];
			Random rnd4 = new Random();
	        System.out.println("Numeros aleatoreos");
	        for (i = 0; i < vector.length; i++) {
	            vector[i] = rnd4.nextInt(9999)+1;
	            System.out.print(vector[i] + " ");
	        }   
	        System.out.println("\nNumeros ordenados");
			QuickSort o3 = new QuickSort();
			 inicio = System.currentTimeMillis();
			o3.OrdenamientoQuickSort(vector, 0, vector.length - 1);
			for (i = 0; i < vector.length; i++){ 
				System.out.print(vector[i]+ " "); 
			} 
			fin = System.currentTimeMillis();
			tiempo = fin - inicio;
			System.out.println("\nEl ordenamiento se demoro "+ tiempo + " milisegundos");
			System.out.println("\n");
			new Menu();
		break;
		case 5:
			System.out.println("METODO RAPIDO (COUNTINGSORT)");
				System.out.println("1. 100");
				System.out.println("2. 200");
				System.out.println("3. 500");
				System.out.println("4. 1000");
				System.out.println("5. 1500");
				opcion2 = teclado.nextInt();
				
				switch(opcion2) {
				case 1:
						n=100;
					break;
				case 2:
						n=20;
					break;
				case 3:
						n=500;
					break;
				case 4:
						n=1000;
					break;
				case 5:
						n=1500;
				break;
				default:
					System.out.println("Opcion incorrecta");
				}
			CountingSort o4 = new CountingSort();
			int[] arra = null;
			CountingSort.main(arra,n);
			new Menu();
		break;
		default:
			System.out.println("Opcion incorrecta");
		}
	}
	public static void main(String[] args) {
		new Menu();
	}
}

/////////////////Burbuja////////////////
package Ordenamiento;

public class Burbuja {
	public void OrdenamientoBurbuja(int[] array) {
		
		int aux;
		boolean cambiar = false;
		
		while(true) {
			cambiar = false;
			
			for(int i=1; i<array.length; i++) {
				if(array[i]<array[i-1]) {
					aux=array[i];
					array[i]=array[i-1];
					array[i-1]=aux;
					cambiar=true;
				}
			}
			
			if(cambiar==false)
				break;
		}
	}
}
///////////////CountingSort/////////////
package Ordenamiento;
import java.util.Random;
import java.util.Scanner;

	public class CountingSort {
	static long tiempo;
	static long inicio;
	static long fin;
	static long segundos;
	private static int range;
	private static int[] counting_Sort(int[] array) {
		int[] values = new int [range+1];
		for(int i = 0; i <= range; i++) 
		values[i] = 0;
		for (int i = 0; i < array.length; i++) {
		values[array[i]]++;
		}
		int[] arr = new int[array.length];
		int k = 0;
		for(int i = 0; i <= range; i++) {
		for(int j = 0; j < values[i]; j++) {
		arr[k++] = i;
		}
			}	
		
		return arr;
	}
		public static void main(int[] arra,int n) {
		Scanner sc = new Scanner(System.in);
		range = 100;
		int numeros;
		int[] arreglo = new int[n];
		       Random rnd = new Random();
		       System.out.println("Numeros Aleatorios ");
		       for (int i = 0; i < arreglo.length; i++) {
		           numeros = rnd.nextInt(99)+1;
		           arreglo[i] = numeros;
		        System.out.println(arreglo[i] + " ");
		       }
		       System.out.println("Numeros Ordenados ");
		       inicio = System.currentTimeMillis();
		arreglo = counting_Sort(arreglo);
		for(int i = 0; i < arreglo.length; i++) {
		System.out.println(arreglo[i] + " ");
		fin = System.currentTimeMillis();
		tiempo = fin - inicio;
		}
		System.out.println("\nEl ordenamiento se demoro "+ tiempo + " milisegundos");

	}

}
////////////////HeapSort////////////////
package Ordenamiento;

	public class HeapSort {
		public void OrdenamientoHeapSort(int[] arr) { 
		
		int i;
		for (i = arr.length; i > 1; i--) { 
			fnSortHeap(arr, i - 1); 
			} 		
		} 
	
		public static void fnSortHeap(int array[], int arr_ubound) { 
			
			int i, o; 
			int lChild, rChild, mChild, root, temp; 
			
			root = (arr_ubound - 1) / 2; 
			for (o = root; o >= 0; o--) { 
			
			for (i = root; i >= 0; i--) { 
			
			lChild = (2 * i) + 1; 
			rChild = (2 * i) + 2; 
		
		if ((lChild <= arr_ubound) && (rChild <= arr_ubound)) { 
		
			if (array[rChild] >= array[lChild]) 
			mChild = rChild; 
			else 
			mChild = lChild; 
			
		} else { 
		
			if (rChild > arr_ubound) 
			mChild = lChild; 
			else 
			mChild = rChild; 
		
		} 
		
		if (array[i] < array[mChild]) { 
		
			temp = array[i]; 
			array[i] = array[mChild]; 
			array[mChild] = temp; 
			
			} 
			} 
		} 
		
		
		temp = array[0]; 
		array[0] = array[arr_ubound]; 
		array[arr_ubound] = temp; 
		return;
		
		} 
			
	}
  /////////////Insercion//////////////
  package Ordenamiento;

public class Insercion {
	public void Ordenar(int[] array) {
		int aux;
		int cont1,cont2;
			for(cont1 = 1; cont1 < array.length; cont1++) {
				aux= array[cont1];
				
				for(cont2 = cont1-1; cont2>=0 && array[cont2] > aux; cont2--) {
					array[cont2+1]=array[cont2];
					array[cont2] = aux;
				}
				
			}
		}
		
		
}
///////////////QuickSort//////////
package Ordenamiento;
import java.util.Random;

public class QuickSort {
			
    public static void OrdenamientoQuickSort(int[] vector, int izquierda, int derecha) {
        int pivote = vector[izquierda];
        int i = izquierda;
        int j = derecha;
        int auxIntercambio;
       
        while (i < j) {
            while (vector[i] <= pivote && i < j) {
                i++;
            }
            while (vector[j] > pivote) {
                j--;
            }
            if (i < j) {
                auxIntercambio = vector[i];
                vector[i] = vector[j];
                vector[j] = auxIntercambio;
            }
        }
        vector[izquierda] = vector[j];
        vector[j] = pivote;
        if (izquierda < j - 1) {
        	OrdenamientoQuickSort(vector, izquierda, j - 1);
        }
        if (j + 1 < derecha) {
            OrdenamientoQuickSort(vector, j + 1, derecha);
        }
        
		
    }	
    public static void main(String[] args) {
        int[] numeros = new int[40]; 
        
        
    }
}
